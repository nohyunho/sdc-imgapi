#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 2016 Joyent, Inc.
#

#
# Restore IMGAPI data from a Manta backup.
#
# This is meant to be run from a created standalone IMGAPI zone.
# See notes in "docs/operator-script.md".
#
#
# As part of normal operation, a standalone IMGAPI that is configured to use
# Manta will backup local data to Manta (see "imgapi-standalone-backup"). To
# recover an IMGAPI one can do the following:
#   - create a new standalone IMGAPI instance with `imgapi-standalone-create`
#   - add the new instance's SSH key to the configured Manta user
#   - ssh in to that instance and run `imgapi-standalone-restore`
#
# Eventually (when RFD 40 is more complete), when standalone IMGAPI deployments
# support storing all data in remotely and/or HA, this restore process will
# be unnecessary.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


# ---- globals and config

export PATH=/opt/smartdc/imgapi/build/node/bin:/opt/smartdc/imgapi/node_modules/.bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

MANTASYNC=/opt/smartdc/imgapi/node_modules/.bin/manta-sync
CONFIG=/data/imgapi/etc/imgapi.config.json
RESTORED_MARKER=/data/imgapi/run/restored.marker


#---- support stuff

function usage () {
    echo "Usage:"
    echo "  imgapi-standalone-restore [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h          Show this help and exit."
    echo "  -y          Skip the confirmation before restoring."
}

function fatal {
    echo "$0: fatal error: $*"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}


#---- mainline

trap 'errexit $?' EXIT

optYes=no
while getopts "hy" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        y)
            optYes=yes
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

config="$(node /opt/smartdc/imgapi/lib/config.js)"

# Guard that this is run only in a standalone IMGAPI.
mode=$(echo "$config" | json mode)
if [[ $mode == "dc" ]]; then
    fatal "cannot run in a 'mode=dc' IMGAPI instance"
fi

# Get manta info from config
export MANTA_URL=$(echo "$config" | json manta.url)
[[ -n "$MANTA_URL" ]] || fatal "not configured to use Manta: no 'manta.url' in config"
export MANTA_USER=$(echo "$config" | json manta.user)
[[ -n "$MANTA_USER" ]] || fatal "not configured to use Manta: no 'manta.user' in config"
# Current manta-sync doesn't support the newer KEY_ID's, so we'll rebuild it
# from the key path.
mantaKeyPath=$(echo "$config" | json manta.key)
[[ -n "$mantaKeyPath" ]] || fatal "not configured to use Manta: no 'manta.key' in config"
export MANTA_KEY_ID=$(ssh-keygen -E md5 -lf $mantaKeyPath | awk '{print $2}' | cut -c5-)
if [[ "$(echo "$config" | json manta.insecure)" == "true" ]]; then
    export MANTA_TLS_INSECURE=1
else
    unset MANTA_TLS_INSECURE
fi

bakDir=$(echo "$config" | json manta.rootDir)/backup
echo "Restore IMGAPI data from Manta backup:"
echo "    backup (in Manta): $bakDir/{images,manifests}"
echo "       target (local): /data/imgapi/{images,manifests}"
echo ""
if [[ $optYes != "yes" ]]; then
    echo "Hit enter to continue / Ctrl+C to abort."
    read
fi

# Access check, to ensure a clear error message if our IMGAPI instance key
# isn't working to get to Manta.
accessCheckStatus=$(minfo $bakDir | head -1 | awk '{print $2}')
if [[ $accessCheckStatus == "403" ]]; then
    echo "* * *" >&2
    echo "error: Cannot access the backup dir with the following credentials:" >&2
    echo "    MANTA_URL=$MANTA_URL" >&2
    echo "    MANTA_USER=$MANTA_USER" >&2
    echo "    MANTA_KEY_ID=$MANTA_KEY_ID" >&2
    if [[ -n "$MANTA_TLS_INSECURE" ]]; then
        echo "    MANTA_TLS_INSECURE=$MANTA_TLS_INSECURE" >&2
    fi
    echo "" >&2
    echo "A likely reason is that this IMGAPI's instance pubkey was not added to" >&2
    echo "the '$MANTA_USER' Manta account. Depending on your Triton CLI profiles" >&2
    echo "the following might help:" >&2
    echo "" >&2
    echo "    triton inst get $(mdata-get sdc:alias) | json metadata.instPubKey \\" >&2
    echo "        | triton -a $MANTA_USER key add -" >&2
    echo "* * *" >&2
    exit 1
fi

echo ""
infoStatus=$(minfo $bakDir/images | head -1 | awk '{print $2}')
if [[ $infoStatus == "404" ]]; then
    echo "Nothing in $bakDir/images to restore."
    echo "This means all image files for this IMGAPI are stored in Manta,"
    echo "which is a good thing."
elif [[ $infoStatus != "200" ]]; then
    fatal "unexpected status code getting `minfo $bakDir/images`: $infoStatus"
else
    echo "Restore /data/imgapi/images"
    $MANTASYNC -r $bakDir/images /data/imgapi/images \
        | (grep -v "size same as source file, skipping" || true)
fi

echo ""
echo "Restore /data/imgapi/manifests"
$MANTASYNC -r $bakDir/manifests /data/imgapi/manifests \
    | (grep -v "size same as source file, skipping" || true)

# The restored.marker file is used to tell 'imgapi-standalone-backup' that it
# is okay to run. Else an unrestored IMGAPI instance could wipe out existing
# backup data from an earlier instance.
echo ""
restoredTimestamp=$(date -u '+%Y-%m-%dT%H:%M:%S')
echo "Mark restoration ($RESTORED_MARKER)"
mkdir -p $(dirname $RESTORED_MARKER)
echo "restored at $restoredTimestamp" >>$RESTORED_MARKER

echo ""
echo "Restarting imgapi service"
svcadm restart imgapi
